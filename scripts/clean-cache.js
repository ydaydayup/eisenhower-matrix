// 清理webpack缓存脚本const fs = require('fs');const path = require('path');const { execSync } = require('child_process');// 清理webpack缓存const cleanWebpackCache = () => {  const webpackCacheDir = path.join(process.cwd(), '.next/cache/webpack');  try {    if (fs.existsSync(webpackCacheDir)) {      // 在Windows上使用不同的删除命令      if (process.platform === 'win32') {        try {          execSync(`rmdir /s /q "${webpackCacheDir}"`, { stdio: 'inherit' });        } catch (err) {        }      } else {        try {          execSync(`rm -rf "${webpackCacheDir}"`, { stdio: 'inherit' });        } catch (err) {        }      }      // 重新创建缓存目录      fs.mkdirSync(webpackCacheDir, { recursive: true });    } else {    }  } catch (error) {  }};// 清理next.js缓存const cleanNextCache = () => {  try {    // 删除.next目录中的编译文件    const nextDir = path.join(process.cwd(), '.next');    if (fs.existsSync(nextDir)) {      const dirsToClean = [        path.join(nextDir, 'cache'),        path.join(nextDir, 'server'),        path.join(nextDir, 'static')      ];      dirsToClean.forEach(dir => {        if (fs.existsSync(dir)) {          if (process.platform === 'win32') {            try {              execSync(`rmdir /s /q "${dir}"`, { stdio: 'inherit' });            } catch (err) {            }          } else {            try {              execSync(`rm -rf "${dir}"`, { stdio: 'inherit' });            } catch (err) {            }          }          // 重新创建目录          fs.mkdirSync(dir, { recursive: true });        }      });    }  } catch (error) {  }};// 执行清理const main = () => {  cleanWebpackCache();  cleanNextCache();};main(); 