"use client";import React, { Component, ErrorInfo, ReactNode } from 'react';interface Props {  children: ReactNode;  fallback?: ReactNode;}interface State {  hasError: boolean;  error: Error | null;}export class ErrorBoundary extends Component<Props, State> {  constructor(props: Props) {    super(props);    this.state = {      hasError: false,      error: null    };  }  static getDerivedStateFromError(error: Error): State {    // 更新 state 使下一次渲染能够显示降级 UI    return { hasError: true, error };  }  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {    // 你同样可以将错误日志上报给服务器  }  render(): ReactNode {    if (this.state.hasError) {      // 你可以自定义降级 UI      return this.props.fallback || (        <div className="p-6 max-w-md mx-auto bg-white rounded-xl shadow-md flex flex-col items-center mt-10">          <h2 className="text-xl font-bold text-red-600 mb-2">应用发生错误</h2>          <p className="text-gray-600 mb-4">很抱歉，应用加载过程中出现了问题。</p>          <details className="text-sm text-gray-500 mb-4">            <summary>查看错误详情</summary>            <p className="mt-2 p-2 bg-gray-100 rounded overflow-auto">              {this.state.error?.toString()}            </p>          </details>          <button            onClick={() => window.location.reload()}            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"          >            刷新页面          </button>        </div>      );    }    return this.props.children;  }} 